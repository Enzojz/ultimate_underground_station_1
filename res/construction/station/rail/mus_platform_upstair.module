local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local general = require "entry/general"
local mus = require "mus_platform"
local quat = require "entry/quaternion"
local dump = require "luadump"
local unpack = table.unpack

local mType = "mus_upstairs"
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 15000,
        },
        description = {
            name = _("10m Underground platform"),
            description = _("An underground platform of 10m wide"),
            icon = "ui/construction/street/underpass_entry.tga"
        },
        category = {
            categories = {"Stairs"},
        },
        type = mType,
        order = {
            value = 260,
        },
        metadata = {
            platform = true,
            width = 10,
            type = mType
        },
        
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local info = mus.slotInfo(slotId)
            local group = result.group[info.pos.z]
            local refSlot = slotId % 100000 - 2000
            local allArcs = result.allArcs[refSlot]
            local pos = info.pos.y % 2 == 0 and (allArcs.blockCount - info.pos.y / 2) or ((info.pos.y + 1) / 2) 
            
            local newModels = mus.upstairsModels(group.config, allArcs, pos)
            
            local signFn = function(coords)
                local trans = quat.byVec(coor.xyz(1, 0, 0), coords.i - coords.s):mRot() 
                    * coor.trans(coords.i + coor.xyz(0, 0, -group.config.hPlatform - 0.53 + 4))
                return general.newModel("mus/signs/platform_signs_2.mdl", trans)
            end

            local signL = group.modules[info.pos.x - 1] and signFn(allArcs.blockCoords.stairs.outer.lc[pos]) or nil
            local signR = group.modules[info.pos.x + 1] and signFn(allArcs.blockCoords.stairs.outer.rc[pos]) or nil
            
            local startBlock = allArcs.blockCoords.platform.lane.mc[pos - 1]
            local pt1 = startBlock.i:avg(startBlock.s)
            local pt2 = allArcs.blockCoords.platform.lane.mc[pos].s
            local pt3 = allArcs.blockCoords.platform.lane.mc[pos + 1].i + coor.xyz(0, 0, 6)
            local lane =
                {
                    general.newModel("mus/person_lane.mdl", general.mRot(pt2 - pt1), coor.trans(pt1)),
                    general.newModel("mus/person_lane.mdl", general.mRot(pt3 - pt2), coor.trans(pt2))
                }
            
            newModels = newModels + lane + {signL, signR}
            
            local connector = group.connectors[info.pos.x] and group.connectors[info.pos.x] or {up = pipe.new * {}, down = pipe.new * {}}
            connector.up = connector.up / func.with(pt3, {up = true, down = false})
            group.connectors[info.pos.x] = connector
            
            result.invoke[#result.invoke + 1] = function()
                result.models = result.models * pipe.filter(function(m) return m.tag ~= "__module_" .. refSlot or (m.pos ~= pos and m.pos ~= pos + 1) end) + general.withTag(tag)(newModels)
            end
        end,
        
        getModelsFn = function(params)
            return {}
        end
    }

end
