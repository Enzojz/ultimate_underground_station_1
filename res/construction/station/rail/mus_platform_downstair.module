local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local general = require "entry/general"
local mus = require "mus_platform"
local quat = require "entry/quaternion"
local dump = require "luadump"

local unpack = table.unpack
local ma = math
local pi = ma.pi

local platformWidth = 10
local stairsWidth = 7

local platformArcs = mus.platformArcs(platformWidth, stairsWidth)
local mType = "mus_stairs"
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 15000,
        },
        description = {
            name = _("10m Underground platform"),
            description = _("An underground platform of 10m wide"),
            icon = "ui/construction/street/underpass_entry.tga"
        },
        category = {
            categories = {"Stairs"},
        },
        type = mType,
        order = {
            value = 260,
        },
        metadata = {
            platform = true,
            width = 10,
            type = mType
        },
        
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local pos = slotId % 1000
            local refSlot = (slotId - pos - 10000) / 1000
            local rank = result.slotId2Rank[refSlot]
             
            local allArcs = result.allArcs[rank]
            local newModels = mus.downstairModels(result.config, allArcs, mus.fitModel, pos)
            
            result.invoke[#result.invoke + 1] = function()
                result.models = result.models * pipe.filter(function(m) return m.tag ~= "__module_" .. refSlot or m.pos ~= pos end) + general.withTag(tag)(newModels)
            end
        end,
        
        getModelsFn = function(params)
            return {}
        end
    }

end
