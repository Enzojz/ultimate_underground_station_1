local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local general = require "entry/general"
local mus = require "mus_platform"
local quat = require "entry/quaternion"
local dump = require "luadump"

local unpack = table.unpack

local mType = "mus_downstairs"
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 15000,
        },
        description = {
            name = _("10m Underground platform"),
            description = _("An underground platform of 10m wide"),
            icon = "ui/construction/street/underpass_entry.tga"
        },
        category = {
            categories = {"Stairs"},
        },
        type = mType,
        order = {
            value = 260,
        },
        metadata = {
            platform = true,
            width = 10,
            type = mType
        },
        
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local info = mus.slotInfo(slotId)
            local group = result.group[info.pos.z]
            local refSlot = slotId % 100000 - 1000
            local allArcs = result.allArcs[refSlot]
            local pos = info.pos.y % 2 == 0 and (allArcs.blockCount - (info.pos.y - 2) / 2) or ((info.pos.y + 1) / 2) 
            local isBackward = pos < allArcs.count
            local newModels = mus.downstairsModels(group.config, allArcs, pos, isBackward)

            local blocks = allArcs.blockCoords.platform.lane.mc
            local pt1 = (blocks[isBackward and (pos + 1) or (pos - 1)].i):avg(blocks[isBackward and (pos + 1) or (pos - 1)].s)
            local pt2 = isBackward and blocks[pos].i or blocks[pos].s
            local pt3 = (isBackward and blocks[pos].s or blocks[pos].i) - coor.xyz(0, 0, 3)
            local lane =
                {
                    general.newModel("mus/person_lane.mdl", general.mRot(pt2 - pt1), coor.trans(pt1)),
                    general.newModel("mus/person_lane.mdl", general.mRot(pt3 - pt2), coor.trans(pt2))
                }
            
            newModels = newModels + lane
            
            local connector = group.connectors[info.pos.x] and group.connectors[info.pos.x] or { up = pipe.new * {}, down = pipe.new * {}}
            connector.down = connector.down / func.with(pt3, {down = true, up = false})
            group.connectors[info.pos.x] = connector

            result.invoke[#result.invoke + 1] = function()
                result.models = result.models * pipe.filter(function(m) return m.tag ~= "__module_" .. refSlot or m.pos ~= pos or m.wall end) + general.withTag(tag)(newModels)
            end
        end,
        
        getModelsFn = function(params)
            return {}
        end
    }

end
