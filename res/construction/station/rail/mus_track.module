local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local general = require "entry/general"
local mus = require "mus_track"
local quat = require "entry/quaternion"
local dump = require "luadump"

local unpack = table.unpack
local ma = math
local pi = ma.pi

local trackWidth = 5
local mType = "mus_track"
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 15000,
        },
        description = {
            name = _("Underground station track"),
            description = _("An underground station track"),
            icon = "ui/construction/street/underpass_entry.tga"
        },
        category = {
            categories = {"track"},
        },
        type = mType,
        order = {
            value = 260,
        },
        metadata = {
            track = true,
            width = 5,
            type = mType
        },
        
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local withTag = general.withTag(tag)
            local rank = result.slotId2Rank[slotId]
            local allArcs = mus.trackArcs(trackWidth)(result.config, result.arcs[rank])
            result.allArcs[rank] = allArcs
            local refArc = pipe.new * allArcs[1]()()() * pipe.map(mus.arc2Edges) * pipe.flatten() * pipe.map(pipe.map(coor.vec2Tuple))
            local edges = {
                type = "TRACK",
                alignTerrain = false,
                params = {
                    type = "high_speed.lua",
                    catenary = true,
                },
                edgeType = "TUNNEL",
                edgeTypeName = "ust_void.lua",
                edges = refArc,
                snapNodes = {5, 11},
                tag2nodes = {
                    [tag] = func.seq(0, #refArc - 1)
                }
            }
            
            local newModels = mus.trackModels(result.config, allArcs, mus.fitModel)
            result.terminalInfo[rank] = true
            
            result.invoke[#result.invoke + 1] = function()
                result.models = result.models + withTag(newModels)
            end
            
            result.edgeLists = pipe.new
                * result.edgeLists
                / edges

                
        end,
        
        getModelsFn = function(params)
            return {}
        end
    }

end
