local paramsutil = require "paramsutil"
local func = require "entry/func"
local coor = require "entry/coor"
local general = require "entry/general"
local line = require "mus/coorline"
local trackEdge = require "mus/trackedge"
local quat = require "entry/quaternion"
local pipe = require "entry/pipe"
local mus = require "mus"
local musm = require "mus_menu"

local dump = require "luadump"

-- local musm = require "mus_menu"
local ma = math
local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local function params()
    return {
        {
            key = "wall",
            name = _("Wall"),
            values = {
                "ui/construction/station/rail/tiles.tga",
                "ui/construction/station/rail/tiles_classic.tga"
            },
            uiType = "ICON_BUTTON",
            defaultIndex = 0
        },
        {
            key = "floor",
            name = _("Floor Style"),
            values = {
                "ui/construction/station/rail/marble.tga",
                "ui/construction/station/rail/honeycomb.tga",
                "ui/construction/station/rail/marble_geometric.tga",
                "ui/construction/station/rail/concrete_tiles2.tga",
                "ui/construction/station/rail/asphalt.tga"
            },
            uiType = "ICON_BUTTON",
            tooltip = _("Floor Style"),
            defaultIndex = 0
        },
        {
            key = "radius",
            name = _("Radius") .. " " .. "(m)",
            values = musm.rList * pipe.map(function(r) return r > 15 and "∞" or tostring(math.floor(r * 1000)) end),
            uiType = "SLIDER",
            defaultIndex = (#musm.rList - 1) / 2
        },
        {
            key = "lPlatform",
            name = _("Platform Length") .. " " .. "(m)",
            values = func.map(musm.trackLengths, tostring),
            uiType = "SLIDER",
            defaultIndex = 5
        },
        {
            key = "hPlatform",
            name = _("Platform Height") .. " " .. "(mm)",
            values = func.map(musm.hPlatformList, tostring),
            uiType = "SLIDER",
            defaultIndex = 3
        },
        {
            key = "slope",
            name = _("Slope") .. " " .. "(‰)",
            values = func.map(musm.slopeList, tostring),
            uiType = "SLIDER",
            defaultIndex = (#musm.slopeList - 1) / 2
        }
    }
end

local offsetGen = function(meta)
    local function gen(result, base, lastPos, fst, snd, ...)
        if (fst and snd) then
            local pos = snd.pos
            local offset = base + (fst.width + snd.width) * 0.5
            
            return gen(result + {{pos, offset}}, offset, pos, snd, ...)
        else
            return result
        end
    end
    return gen(pipe.new * {}, 0, nil, {width = 0}, unpack(meta))
end

local makeConfig = function(params)
    local radius = musm.rList[params.radius + 1] * 1000
    local length = min(musm.trackLengths[params.lPlatform + 1], abs(radius * pi * 1.5))
    local hPlatform = musm.hPlatformList[params.hPlatform + 1] * 0.001
    local slope = musm.slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
    
    local arcPacker = mus.arcPacker(length, slope, radius)
    
    local modelType = mus.models({platform = params.floor + 1, wall = params.wall + 1})
      
    return {
        arcPacker = arcPacker,
        fitModel = slope == 0 and mus.fitModel2D or mus.fitModel,
        hPlatform = hPlatform,
        radius = radius,
        refZ = hPlatform + 0.53,
        slope = slope,
        models = modelType
    } 
end

function data()
    local constructionTemplates =
        {
            {
                constructionType = "RAIL_STATION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _("Underground Station"),
                    description = _("An underground level for a station, width adjustable platform width and radius."),
                    icon = "ui/construction/station/rail/mus.tga"
                },
                data = {
                    params = {
                        {
                            key = "trackNb",
                            name = _("Track numbers"),
                            values = func.map(musm.trackNumberList, tostring),
                            uiType = "SLIDER",
                            defaultIndex = 1
                        },
                        {
                            key = "platformLeft",
                            name = _("Platform on the left"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                        },
                        {
                            key = "platformRight",
                            name = _("Platform on the right"),
                            uiType = "CHECKBOX",
                            values = {"0", "1"},
                        },
                    }
                },
            }
        }
    
    local createTemplateFn = function(params)
        local result = {
            -- [999] = "station/rail/mus_track.module",
            [1000] = "station/rail/mus_platform_10m.module",
            [1] = "station/rail/mus_track.module",
        }
        
        return result
    end
    
    local upgradeFn = function(params)
        return {}
    end
    
    local updateFn = function(params)
        if #func.keys(params.modules) == 0 then
            return {
                edgeLists = {},
                models = {{
                    id = "asset/icon/marker_exclamation.mdl",
                    transf = coor.I(),
                }},
                terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
            }
        end

        local result = {}
        
        result.group = {}
        result.allArcs = {}
        
        result.slots = pipe.new * {}
        result.invoke = {}
        
        for slotId, m in pairs(params.modules) do
            local info = mus.slotInfo(slotId)
            if (not result.group[info.pos.z]) then
                result.group[info.pos.z] =
                    {
                        allPos = pipe.new * {},
                        pos2Slot = {},
                        connectors = {},
                        modules = {},
                        arcs = {},
                        terminalInfo = {}
                    }
                if (params.modules[slotId].params) then
                    result.group[info.pos.z].config = makeConfig(params.modules[slotId].params)
                    result.group[info.pos.z].transf = params.modules[slotId].transf
                    local _, mr, _ = coor.decomposite(params.modules[slotId].transf)
                    result.group[info.pos.z].config.transf = {
                        pt = params.modules[slotId].transf,
                        vec = mr
                    }
                else
                    result.group[info.pos.z].config = makeConfig(params)
                    
                    result.group[info.pos.z].config.transf = {
                        pt = coor.I(),
                        vec = coor.I()
                    }
                end
            end
            if info.typeId < 2 then
                local gr = result.group[info.pos.z]
                local pos = info.pos.x
                gr.allPos[#gr.allPos + 1] = pos
                gr.pos2Slot[pos] = slotId
                gr.modules[pos] = func.with(m,
                    {
                        slotId = slotId,
                        metadata = func.with(m.metadata, {pos = pos})
                    }
            )
            end
        end
        
        for n, g in pairs(result.group) do
            g.allPos = g.allPos * pipe.sort()
            local config = g.config
            local posMin = func.min(g.allPos)
            local posMax = func.max(g.allPos)
            
            local offsets = pipe.new
                * func.seq(posMin > 0 and -1 or (posMin - 1), posMax + 1)
                * pipe.map(function(pos)
                    return g.modules[pos] and g.modules[pos].metadata or {pos = pos, width = 5}
                end)
                * offsetGen
            
            local reOffset = func.filter(offsets, function(o) return o[1] == 0 end)[1][2]
            offsets = offsets * pipe.map(function(o) return {o[1], o[2] - reOffset} end)
            
            local entityOffsets = offsets * pipe.fold(pipe.new * {}, function(r, o) return func.contains(g.allPos, o[1]) and r / o[2] or r end)
            
            for i, pos in ipairs(g.allPos) do
                g.arcs[pos] = config.arcPacker(config.radius - entityOffsets[i], coor.xyz(config.radius, 0, 0))
            end
            
            local slots = offsets
                * pipe.map(function(ph)
                    local pos, offset = unpack(ph)
                    return {
                        {
                            id = n * 10000 + (pos < 0 and (pos + 1000) or pos),
                            transf = coor.transX(offset) * g.config.transf.pt,
                            type = "mus_track",
                            spacing = {2.5, 2.5, 5, 5}
                        },
                        {
                            id = n * 10000 + (pos < 0 and (pos + 1000 + 1000) or (pos + 1000)),
                            transf = coor.transX(offset) * g.config.transf.pt,
                            type = "mus_platform",
                            spacing = {2.5, 2.5, 5, 5}
                        }
                    }
                end)
                * pipe.flatten()
            result.slots = result.slots + slots
        end
        
        result.models = pipe.new * {}
        
        result.colliders = {}
        result.terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
        result.groundFaces = {}
        result.terminalGroups = {}
        result.stations = {}
        result.dependentSlots = {}
        result.edgeLists = pipe.new * {}
        result.slotConfig = {}
        
        result.occupied = {{}, {}, {}, {}}
        result.terminalInfo = {}
        result.cost = 0
        
        result.terminateConstructionHook = function()
            for _, f in ipairs(result.invoke) do f() end
            
            for _, g in pairs(result.group) do
                local modules = g.modules
                for pos, m in pairs(modules) do
                    if m.metadata.track then
                        if (modules[pos - 1] and modules[pos - 1].metadata.platform) then
                            local node = g.terminalInfo[pos] + 1
                            result.terminalGroups[#result.terminalGroups + 1] = {
                                callbacks = {},
                                terminals = func.seqMap(g.terminalInfo[pos - 1][2], function(t) return {t, 0} end),
                                vehicleNodeOverride = node,
                                vehicleNodeOverrideList = {node},
                                vehicleNodeOverrideListCenter = {node + 3}
                            }
                        end
                        if (modules[pos + 1] and modules[pos + 1].metadata.platform) then
                            local node = g.terminalInfo[pos] + 7
                            result.terminalGroups[#result.terminalGroups + 1] = {
                                callbacks = {},
                                terminals = func.seqMap(g.terminalInfo[pos + 1][1], function(t) return {t, 0} end),
                                vehicleNodeOverride = node,
                                vehicleNodeOverrideList = {node},
                                vehicleNodeOverrideListCenter = {node + 3}
                            }
                        end
                    end
                    if m.metadata.platform then
                        if (g.connectors[pos]) then
                            local lanes = pipe.new * {
                                #g.connectors[pos].up > 1 and func.interlace(g.connectors[pos].up) or {},
                                #g.connectors[pos].down > 1 and func.interlace(g.connectors[pos].down) or {}
                            }
                            * pipe.flatten()
                            * pipe.map(function(c) return mus.unitLane(unpack(c)) end)
                            result.models = result.models + lanes
                        end
                    end
                end
                
                local allConnectors = pipe.new
                    * g.allPos
                    * pipe.filter(function(pos) return g.modules[pos].metadata.platform end)
                    * pipe.map(function(pos) return g.connectors[pos] end)
                
                result.models = result.models
                    + mus.linkConnectors(allConnectors * pipe.map(pipe.select("up")))
                    + mus.linkConnectors(allConnectors * pipe.map(pipe.select("down")))
            
            end
        end
        
        return result
    end
    
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Underground Station"),
            description = _("An underground level for a station, width adjustable platform width and radius.")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = params(),
        upgradeFn = upgradeFn,
        updateFn = updateFn
    }
end
