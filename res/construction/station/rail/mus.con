local paramsutil = require "paramsutil"
local func = require "entry/func"
local coor = require "entry/coor"
local line = require "mus/coorline"
local trackEdge = require "mus/trackedge"
local quat = require "entry/quaternion"
local pipe = require "entry/pipe"
local mus = require "mus"
local musm = require "mus_menu"

local dump = require "luadump"

-- local musm = require "mus_menu"
local ma = math
local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local function params()
    return
        pipe.new
        +
        {
            {
                key = "wall",
                name = _("Wall"),
                values = {_("Tiles 1"), _("Tiles 2")},
                defaultIndex = 0
            },
            {
                key = "floor",
                name = _("Floor Style"),
                values = {_("Marble 1"), _("Honeycomb"), _("Marble 2"), _("Concrete"), _("Asphalt")},
                defaultIndex = 0
            }
        }
        +
        {
            {
                key = "sign",
                name = "",
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "radius",
                name = _("Radius") .. " " .. "(m)",
                values = pipe.from("∞") + func.map(func.range(musm.rList, 2, #musm.rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
                defaultIndex = 0
            },
            {
                key = "length",
                name = _("Platform Length") .. " " .. "(m)",
                values = func.map(musm.trackLengths, tostring),
                defaultIndex = 5
            }
        }
        +
        {
            {
                key = "hPlatform",
                name = _("Platform Height") .. " " .. "(mm)",
                values = func.map(musm.hPlatformList, tostring),
                defaultIndex = 3
            }
        } +
        {
            {
                key = "slopeSign",
                name = "",
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "slope",
                name = _("Slope") .. " " .. "(‰)",
                values = func.map(musm.slopeList, tostring),
                defaultIndex = 0
            }
        }
        + {
            {
                key = "altitude",
                name = _("Depth Adjustment") .. " " .. "(m)",
                values = func.seqMap({-5, 5}, tostring),
                defaultIndex = 5
            }
        }
end

local offsetGen = function(meta)
    local function gen(result, base, fst, snd, ...)
        if (fst and snd) then
            local offset = base + (fst.width + snd.width) * 0.5
            
            local data = snd.track and {offset} or
                {
                    offset,
                    base + fst.width * 0.5,
                    base + fst.width * 0.5 + snd.width
                }
            return gen(result / data, offset, snd, ...)
        else
            return result
        end
    end
    return gen(pipe.new * {}, 0, {width = 0}, unpack(meta))
end

function data()
    local constructionTemplates =
        {
            {
                constructionType = "RAIL_STATION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _("Underground Station"),
                    description = _("An underground level for a station, width adjustable platform width and radius."),
                    icon = "ui/construction/station/rail/mus.tga"
                },
                data = {
                    params = {}
                },
            }
        }
    
    local createTemplateFn = function(params)
        local result = {
            [1001] = "station/rail/mus_platform_10m.module",
            [2] = "station/rail/mus_track.module",
        }
        
        return result
    end
    
    local upgradeFn = function(params)
        end
    
    local updateFn = function(params)
        local result = {}
        
        local radius = musm.rList[params.radius + 1] * 1000 * (params.sign == 0 and 1 or -1)
        local length = min(musm.trackLengths[params.length + 1], abs(radius * pi * 1.5))
        local hPlatform = musm.hPlatformList[params.hPlatform + 1] * 0.001
        local slope = musm.slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
        
        local arcPacker = mus.arcPacker(length, slope, radius)
        
        result.modelType = mus.models({platform = params.floor + 1, wall = params.wall + 1})
        
        
        result.slotId2Rank = {}
        
        local modules = {}
        local allPos = {}
        local pos2Slot = {}
        local slot2Pos = {}
        
        dump()(params)
        
        for slotId, m in pairs(params.modules) do
            dump()(slotId)
            local pos = slotId % 1000
            if pos > 500 then pos = pos - 1000 end
            allPos[#allPos + 1] = pos
            pos2Slot[pos] = slotId
            slot2Pos[slotId] = pos
        end
        allPos = pipe.new * allPos * pipe.sort()
        
        for rank = 1, #allPos do
            local pos = allPos[rank]
            local slotId = pos2Slot[pos]
            result.slotId2Rank[slotId] = rank
            modules[rank] = func.with(
                params.modules[slotId], {
                    slotId = slotId,
                    pos = pos,
                    rank = rank
                }
        )
        end
        
        local minPositive = allPos * pipe.filter(function(p) return p > 0 end) * pipe.min()
        dump()(
            {
                params.modules,
                minPositive,
                pos2Slot,
                result.slotId2Rank
            }
        )
        local offsets = pipe.new * modules * pipe.map(pipe.select("metadata")) * offsetGen
                
        local reOffset = offsets[result.slotId2Rank[pos2Slot[minPositive]] or 1][1]
        
        offsets = offsets * pipe.map(pipe.map(pipe.plus(-reOffset)))
        
        result.arcs = offsets * pipe.map(pipe.map(function(of) return arcPacker(radius - of, coor.xyz(radius, 0, 0)) end))
        
        result.config = {
            hPlatform = hPlatform,
            refZ = hPlatform,
            slope = slope,
            models = result.modelType,
        }
        result.slots = {}
        
        local rankMax = func.max(allPos)
        local rankMin = func.min(allPos)
        
        result.slots = pipe.new * func.map2(modules, offsets,
            function(m, o)
                return {
                    id = m.slotId,
                    transf = coor.transX(o[1]),
                    type = m.metadata.type,
                    spacing = {m.metadata.width * 0.5, m.metadata.width * 0.5, 5, 5}
                }
            end
        )
        result.slots = result.slots + {
            {
                id = rankMax + 1,
                transf = coor.transX(offsets[#offsets][1] + result.slots[#result.slots].spacing[1] + 2.5),
                type = "mus_track",
                spacing = {2.5, 2.5, 5, 5}
            },
            {
                id = rankMax + 1 + 1000,
                transf = coor.transX(offsets[#offsets][1] + result.slots[#result.slots].spacing[1] + 5),
                type = "mus_platform",
                spacing = {5, 5, 5, 5}
            },
            {
                id = (rankMin - 1 < 0) and (rankMin - 1 + 1000) or (rankMin - 1),
                transf = coor.transX(offsets[1][1] - result.slots[1].spacing[1] - 2.5),
                type = "mus_track",
                spacing = {2.5, 2.5, 5, 5}
            },
            {
                id = (rankMin - 1 < 0) and (rankMin - 1 + 1000 + 1000) or (rankMin - 1 + 1000),
                transf = coor.transX(offsets[1][1] - result.slots[1].spacing[1] - 5),
                type = "mus_platform",
                spacing = {5, 5, 5, 5}
            }
        }
        
        result.newSlots = pipe.new * {}
        
        result.models = {}
        
        result.colliders = {}
        result.terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
        result.groundFaces = {}
        result.terminalGroups = {}
        result.stations = {}
        result.dependentSlots = {}
        result.edgeLists = {}
        result.slotConfig = {}
        
        result.occupied = {{}, {}, {}, {}}
        result.terminalInfo = {}
        result.cost = 0
        result.terminateConstructionHook = function()
            for rank, m in pairs(modules) do
                if m.metadata.track then
                    if (modules[rank - 1] and modules[rank - 1].metadata.platform) then
                        local node = (rank - 1) * 12 + 1
                        result.terminalGroups[#result.terminalGroups + 1] = {
                            callbacks = {},
                            terminals = func.seqMap(result.terminalInfo[rank - 1][2], function(t) return {t, 0} end),
                            vehicleNodeOverride = node,
                            vehicleNodeOverrideList = {node},
                            vehicleNodeOverrideListCenter = {node + 3}
                        }
                    end
                    if (modules[rank + 1] and modules[rank + 1].metadata.platform) then
                        local node = (rank - 1) * 12 + 7
                        result.terminalGroups[#result.terminalGroups + 1] = {
                            callbacks = {},
                            terminals = func.seqMap(result.terminalInfo[rank + 1][1], function(t) return {t, 0} end),
                            vehicleNodeOverride = node,
                            vehicleNodeOverrideList = {node},
                            vehicleNodeOverrideListCenter = {node + 3}
                        }
                    end
                end
            end
        end
        
        return result
    end
    
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Underground Station"),
            description = _("An underground level for a station, width adjustable platform width and radius.")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = params(),
        upgradeFn = upgradeFn,
        updateFn = updateFn
    }
end
