local paramsutil = require "paramsutil"
local func = require "entry/func"
local coor = require "entry/coor"
local line = require "mus/coorline"
local trackEdge = require "mus/trackedge"
local station = require "mus/stationlib"
local quat = require "entry/quaternion"
local pipe = require "entry/pipe"
local mus = require "mus"
local musm = require "mus_menu"

local dump = require "luadump"

-- local musm = require "mus_menu"
local ma = math
local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local function slotIdDecode(id)
    -- Rule
    -- T XXXXX, T = 5: 5m, 6: 10m, 7:15m, 1: track
    local subId = id % 10000
    local prefix = (id - subId) / 10000
    if prefix == 5 then
        return {"station/rail/mus_platform_5m.module", subId}
    elseif prefix == 1 then
        return {"station/rail/mus_track.module", subId}
    end
end

local function params()
    return
        pipe.new
        +
        {
            {
                key = "wall",
                name = _("Wall"),
                values = {_("Tiles 1"), _("Tiles 2")},
                defaultIndex = 0
            },
            {
                key = "floor",
                name = _("Floor Style"),
                values = {_("Marble 1"), _("Honeycomb"), _("Marble 2"), _("Concrete"), _("Asphalt")},
                defaultIndex = 0
            }
        }
        +
        {
            {
                key = "sign",
                name = "",
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "radius",
                name = _("Radius") .. " " .. "(m)",
                values = pipe.from("∞") + func.map(func.range(musm.rList, 2, #musm.rList), function(r) return tostring(math.floor(r * 1000 + 0.5)) end),
                defaultIndex = 0
            },
            {
                key = "length",
                name = _("Platform Length") .. " " .. "(m)",
                values = func.map(musm.trackLengths, tostring),
                defaultIndex = 5
            }
        }
        +
        {
            {
                key = "hPlatform",
                name = _("Platform Height") .. " " .. "(mm)",
                values = func.map(musm.hPlatformList, tostring),
                defaultIndex = 3
            }
        } +
        {
            {
                key = "slopeSign",
                name = "",
                values = {"+", "-"},
                defaultIndex = 0
            },
            {
                key = "slope",
                name = _("Slope") .. " " .. "(‰)",
                values = func.map(musm.slopeList, tostring),
                defaultIndex = 0
            }
        }
        + {
            {
                key = "altitude",
                name = _("Depth Adjustment") .. " " .. "(m)",
                values = func.seqMap({-5, 5}, tostring),
                defaultIndex = 5
            }
        }
end

local offsetGen = function(meta)
    local function gen(result, base, fst, snd, ...)
        if (fst and snd) then
            local offset = base + (fst.width + snd.width) * 0.5
            
            local data = snd.track and {offset} or
                {
                    offset,
                    base + fst.width * 0.5,
                    base + fst.width * 0.5 + snd.width
                }
            return gen(result / data, offset, snd, ...)
        else
            return result
        end
    end
    return gen(pipe.new * {}, 0, {width = 0}, unpack(meta))
end

function data()
    local constructionTemplates =
        {
            {
                constructionType = "RAIL_STATION",
                type = "DYNAMIC",
                availability = {
                    yearFrom = 0,
                    yearTo = 0
                },
                description = {
                    name = _("Underground Station"),
                    description = _("An underground level for a station, width adjustable platform width and radius."),
                    icon = "ui/construction/station/rail/mus.tga"
                },
                data = {
                    params = {}
                },
            }
        }
    
    local createTemplateFn = function(params)
        local result = {
            [1] = "station/rail/mus_platform_5m.module",
            [2] = "station/rail/mus_track.module",
            [3] = "station/rail/mus_platform_5m.module",
        }
        
        return result
    end
    
    local upgradeFn = function(params)
        end
    
    local updateFn = function(params)
        local result = {}
        
        local radius = musm.rList[params.radius + 1] * 1000 * (params.sign == 0 and 1 or -1)
        local length = min(musm.trackLengths[params.length + 1], abs(radius * pi * 1.5))
        local hPlatform = musm.hPlatformList[params.hPlatform + 1] * 0.001
        local slope = musm.slopeList[params.slope + 1] * 0.001 * (params.slopeSign == 0 and 1 or -1)
        
        local arcPacker = mus.arcPacker(length, slope, radius)
        
        result.modelType = mus.models({platform = params.floor + 1, wall = params.wall + 1})
        result.modules = params.modules
        
        local o = coor.xyz(radius, 0, 0)
        result.arcs = pipe.new * params.modules * pipe.map(pipe.select("metadata"))
            * offsetGen
            * pipe.map(pipe.map(function(of) return arcPacker(radius - of, o) end))
        
        result.config = {
            hPlatform = hPlatform,
            refZ = hPlatform,
            slope = slope,
            models = result.modelType,
        }
        
        
        result.slots = func.mapi(params.modules, function(e, i)
            return {
                id = i,
                transf = e.transf or coor.I(),
                type = "mus_platform",
                spacing = {0, 0, 0, 0}
            }
        end)
        
        result.models = {}
        
        result.colliders = {}
        result.terrainAlignmentLists = {{type = "EQUAL", faces = {}}}
        result.groundFaces = {}
        result.terminalGroups = {}
        result.stations = {}
        result.dependentSlots = {}
        result.edgeLists = {}
        result.slotConfig = {}
        
        result.occupied = {{}, {}, {}, {}}
        result.cost = 0
        result.terminateConstructionHook = function()dump()({r = result}) end
        
        return result
    end
    
    return {
        type = "RAIL_STATION",
        description = {
            name = _("Underground Station"),
            description = _("An underground level for a station, width adjustable platform width and radius.")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = params(),
        upgradeFn = upgradeFn,
        updateFn = updateFn
    }
end
