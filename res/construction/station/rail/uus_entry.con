local paramsutil = require "paramsutil"
local func = require "uus/func"
local coor = require "uus/coor"
local line = require "uus/coorline"
local trackEdge = require "uus/trackedge"
local station = require "uus/stationlib"
local quat = require "uus/quaternion"
local pipe = require "uus/pipe"
local uus = require "uus"
local uusm = require "uus_menu"
local livetext = require "livetext"
local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local widthList = {2, 3, 4, 5, 6}

local function params()
    return
        {
            {
                key = "style",
                name = _("Style"),
                values = {_("Glass fence"), _("Normal fence"), _("Concrete fence")},
                defaultIndex = 0
            },
            {
                key = "wall",
                name = _("Wall"),
                values = {_("Tiles 1"), _("Tiles 2")},
                defaultIndex = 0
            },
            {
                key = "floor",
                name = _("Floor style"),
                values = {_("Marble 1"), _("Honeycomb"), _("Marble 2"), _("Concrete"), _("Asphalt")},
                defaultIndex = 0
            },
            {
                key = "width",
                name = _("Width"),
                values = func.map(widthList, tostring),
                defaultIndex = 2
            },
            {
                key = "orientation",
                name = _("Orientation"),
                values = {_("Lefthand"), _("Straight"), _("Righthand")},
                defaultIndex = 1
            }
        }
end

local models = function(set)
    local s = "uus/entry/" .. (set.style or 1) .. "/"
    local w = "uus/entry/wall/" .. (set.wall or 1) .. "/"
    local f = "uus/entry/floor/" .. (set.floor or 1) .. "/"
    return {
        central = s .. "entry_central.mdl",
        left = s .. "entry_left.mdl",
        right = s .. "entry_right.mdl",
        floor = {
            central = f .. "entry_central_floor.mdl",
            open = f .. "entry_open_side_floor.mdl",
        },
        wall = {
            central = w .. "entry_central_wall.mdl",
            closed = w .. "entry_closed_side.mdl",
            open = w .. "entry_open_side.mdl",
            left = w .. "entry_left_wall.mdl",
            right = w .. "entry_right_wall.mdl"
        }
    }
end

local placeSign = function(name, pos, widthOverride)
    local signColor = "C00257E"
    local decoColor = "CF2F2F2"
    local textColor = "CFFFFFF_emissive"
    
    local font = "alte_din_1451_mittelschrift"
    local livetext = livetext(font, nil, textColor)
    local nameModelsF, width = unpack({livetext(0.35)(name or "?")} or {})
    local height = 0.5
    local thickness = 0.1

    local width = widthOverride or width
    local transBoard = coor.trans(pos)
    return
        pipe.new
        / station.newModel("uus/signs/platform_signs.mdl",
            coor.scale(coor.xyz(width + 1, thickness, height)),
            coor.trans(coor.xyz(0, 0, 0.25)),
            transBoard
        )
        / station.newModel("uus/entry/entry_signs_left.mdl",
            coor.scale(coor.xyz(1, thickness, (height + 0.04) / 1.04)),
            coor.trans(coor.xyz(-width * 0.5 - 0.5, 0, 0.25)),
            transBoard
        )
        / station.newModel("uus/entry/entry_signs_right.mdl",
            coor.scale(coor.xyz(1, thickness, (height + 0.04) / 1.04)),
            coor.trans(coor.xyz(width * 0.5 + 0.5, 0, 0.25)),
            transBoard
        )
        / station.newModel("uus/entry/entry_signs_top.mdl",
            coor.scale(coor.xyz(width + 1, thickness, 1)),
            coor.trans(coor.xyz(0, 0, height * 0.5 + 0.25)),
            transBoard
        )
        / station.newModel("uus/entry/entry_signs_bottom.mdl",
            coor.scale(coor.xyz(width + 1, thickness, 1)),
            coor.trans(coor.xyz(0, 0, -height * 0.5 + 0.25)),
            transBoard
        )
        + nameModelsF(function(w) return coor.trans(coor.xyz(-0.5 * w, -0.055, 0.175 * 3 / 4)) * transBoard end)
        + nameModelsF(function(w) return coor.trans(coor.xyz(-0.5 * w, -0.055, 0.175 * 3 / 4)) * coor.rotZ(pi) * transBoard end)
        +
        func.map({width * 0.5 + 0.25, -width * 0.5 - 0.25}, function(p)
            return station.newModel("uus/entry/entry_signs_pole.mdl",
                coor.scale(coor.xyz(0.5, 0.5, (pos.z - 1.3) / 2.5)),
                coor.trans(coor.xyz(p, 0, - pos.z + 1.3)),
                transBoard
        )
        end)
end


local updateFn = function(params)
    local dz = 0
    local width = (widthList[params.width + 1] or 5)
    local transL = coor.trans(coor.xyz(-0.5 * width, 0, dz))
    local transR = coor.trans(coor.xyz(0.5 * width, 0, dz))
    local isLeftOpen = (params.isLeftOpen == nil) and true or params.isLeftOpen
    local isRightOpen = (params.isRightOpen == nil) and true or params.isRightOpen
    
    local holeFace = station.surfaceOf(coor.xyz(width + 0.25, 6.7, dz), coor.xyz(0.0, -1.55, dz))
    local terrainFace = station.surfaceOf(coor.xyz(width + 2, 10, dz), coor.xyz(0.0, -2.25, dz))
    local aboveFace = station.surfaceOf(coor.xyz(width + 2, 5.25, dz), coor.xyz(0.0, 4.625, dz))
    
    
    local models = models({wall = params.wall + 1, floor = params.floor + 1, style = params.style + 1})
    
    local sign = 1 and placeSign(
        "test", 
        params.style == 2 and coor.xyz(0, 1.85, 1.8) or coor.xyz(0, -1, 1.8),
        params.style < 2 and width - 0.25
    ) or {}
    
    local lanes = pipe.new *
        {-width * 0.2, width * 0.2}
        * pipe.map(function(w) return
            {
                {coor.xyz(w, -5.0, 0.0), coor.xyz(w, 0.0, -3.0)},
                {coor.xyz(w, 0.0, -3.0), coor.xyz(w, 1.75, -3.0)},
                {coor.xyz(w, 1.75, -3.0), coor.xyz(w, 3.417, -3.9)},
                {coor.xyz(w, 3.417, -3.9), coor.xyz(w, 5.2085, -3.9)}
            }
        end)
        * pipe.flatten()
        * pipe.map(pipe.map(function(c) return c .. coor.transZ(dz) end))
        * pipe.map(function(c) return uus.unitLane(unpack(c)) end)
        + func.map(
            {
                {-0.5, -0.2},
                {-0.2, 0.2},
                {0.2, 0.5},
            },
            function(w)
                local tc = func.map(w, function(w) return coor.xyz(w * width, 5.2085, -3.9 + dz) end)
                return uus.unitLane(unpack(tc))
            end
    )
    local street =
        pipe.new
        * (params.orientation == 1
        and {coor.xyz(0.0, -7.5, dz), coor.xyz(0.0, -20.0, dz)}
        or {
            coor.xyz(0.5 * width + 1.5, -8.75, dz),
            coor.xyz(1.25, -8.75, dz),
            coor.xyz(-1.25, -8.75, dz),
            coor.xyz(-12, -8.75, dz)
        })
        * (params.orientation == 2 and pipe.map(function(c) return c .. coor.flipX() end) or pipe.noop())
        * pipe.interlace({"f", "t"})
        * pipe.map(function(c) return {{c.f, (c.t - c.f)}, {c.t, (c.t - c.f)}} end)
        * pipe.flatten()
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    return {
        edgeLists = {
            {
                type = "STREET",
                alignTerrain = true,
                params =
                {
                    type = "uus_entry.lua",
                    tramTrackType = tram
                },
                edges = street,
                snapNodes = {#street - 1}
            }
        },
        models = pipe.new
        / station.newModel(models.left, transL)
        / station.newModel(models.right, transR)
        / station.newModel(models.wall.left, transL)
        / station.newModel(models.wall.right, transR)
        / station.newModel(isLeftOpen and models.floor.open or models.floor.closed, transL)
        / station.newModel(isLeftOpen and models.wall.open or models.wall.closed, transL)
        / station.newModel(isRightOpen and models.floor.open or models.floor.closed, coor.rotZ(pi) * coor.transY(2 * 5.2085) * transR)
        / station.newModel(isRightOpen and models.wall.open or models.wall.closed, coor.rotZ(pi) * coor.transY(2 * 5.2085) * transR)
        * pipe.filter(pipe.select("id"))
        / uus.unitLane(coor.xyz(width * 0.2, -5, dz), coor.xyz(1.25, -7.5, dz))
        / uus.unitLane(coor.xyz(-width * 0.2, -5, dz), coor.xyz(-1.25, -7.5, dz))
        + func.seqMap({1, width}, function(x) return station.newModel(models.central, coor.trans(coor.xyz(x - width * 0.5 - 0.5, 0, dz))) end)
        + func.seqMap({1, width}, function(x) return station.newModel(models.wall.central, coor.trans(coor.xyz(x - width * 0.5 - 0.5, 0, dz))) end)
        + func.seqMap({1, width}, function(x) return station.newModel(models.floor.central, coor.trans(coor.xyz(x - width * 0.5 - 0.5, 0, dz))) end)
        + lanes
        + sign,
        terrainAlignmentLists = {
            {
                type = "EQUAL",
                faces = {terrainFace}
            },
            {
                type = "GREATER",
                faces = {aboveFace}
            }
        },
        groundFaces = {
            {face = holeFace, modes = {{type = "FILL", key = "hole"}}},
            {face = terrainFace, modes = {{type = "FILL", key = "underground_entry"}}},
            {face = terrainFace, modes = {{type = "STROKE_OUTER", key = "underground_entry_border"}}}
        },
        connectors = {
            coor.xyz(-3.5 - width * 0.5, 5.2085, -3.9 + dz),
            coor.xyz(3.5 + width * 0.5, 5.2085, -3.9 + dz)
        },
        interconnection = { 
            isStation = false
         },
    }
end

function data()
    return {
        type = "RAIL_STATION",
        buildMode = "SINGLE",
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        description = {
            name = _("Underground Entry"),
            description = _("An underground entry to a station")
        },
        order = 5017,
        params = params(),
        updateFn = updateFn
    }
end
