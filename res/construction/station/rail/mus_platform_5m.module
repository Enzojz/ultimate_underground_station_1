local func = require "entry/func"
local coor = require "entry/coor"
local pipe = require "entry/pipe"
local general = require "entry/general"
local station = require "mus/stationlib"
local mus = require "mus"
local dump = require "luadump"

local unpack = table.unpack
local ma = math
local pi = ma.pi

local segmentLength = 5
local platformWidth = 10
local platformHeight = 1.93
local edgeWidth = 0.8
local sideWidth = 1.7
local centralWidth = 5

local function makeSize(left, right)
    return {
        lb = coor.xyz(left, -2.5, 0),
        lt = coor.xyz(left, 2.5, 0),
        rt = coor.xyz(right, 2.5, 0),
        rb = coor.xyz(right, -2.5, 0)
    }
end

local stairsWidth = 7

local arcGen = function(p, o) return {
    l = p.l(o),
    r = p.r(-o)
} end

local arcProfiles = function(config, arcs)
    local refZ = config.hPlatform
    local arcRef, arcL, arcR = unpack(arcs)
    local general = {
        l = arcL(refZ)(),
        r = arcR(refZ)()
    }
    
    local arcs = {
        platform = {
            lane = arcGen(general, 0.6),
            edge = arcGen(general, -0.5),
            central = arcGen(general, 0.3)
        },
        ceil = {
            edge = arcGen(general, -0.5),
            central = arcGen(general, 0.2),
        },
        stairs = {
            outer = arcGen(general, (platformWidth - stairsWidth) * 0.5 + 0.3),
            inner = arcGen(general, (platformWidth - stairsWidth) * 0.5 + 0.55)
        },
        terrain = arcGen({
            l = arcL(refZ + 7.75)(function(l) return l + 5 end),
            r = arcR(refZ + 7.75)(function(l) return l + 5 end)
        }, -0.5)
    }
    
    local lsc, rsc, lsuc, rsuc, lc, rc, lpc, rpc, lpic, rpic, lsoc, rsoc, lsic, rsic, c = uus.biLatCoords(5)(
        arcs.platform.edge.l, arcs.platform.edge.r,
        arcs.platform.central.l, arcs.platform.central.r,
        arcs.platform.lane.l, arcs.platform.lane.r,
        arcs.ceil.edge.l, arcs.ceil.edge.r,
        arcs.ceil.central.l, arcs.ceil.central.r,
        arcs.stairs.outer.l, arcs.stairs.outer.r,
        arcs.stairs.inner.l, arcs.stairs.inner.r
    )
    local tlc, trc, tc = mus.biLatCoords(5)(arcs.terrain.l, arcs.terrain.r)
    return {
        [1] = arcL,
        [2] = arcR,
        [3] = arcRef,
        count = c,
        platform = {
            edge = func.with(arcs.platform.edge, {lc = lsc, rc = rsc, mc = mc(lsc, rsc), c = c}),
            central = func.with(arcs.platform.central, {lc = lsuc, rc = rsuc, mc = mc(lsuc, rsuc), c = c}),
            lane = func.with(arcs.platform.lane, {lc = lc, rc = rc, mc = mc(lc, rc), c = c})
        },
        ceil = {
            edge = func.with(arcs.ceil.edge, {lc = lpc, rc = rpc, mc = mc(lpc, rpc), c = c}),
            central = func.with(arcs.ceil.central, {lc = lpic, rc = rpic, mc = mc(lpic, rpic), c = c}),
        },
        stairs = {
            outer = func.with(arcs.stairs.outer, {lc = lsoc, rc = rsoc, mc = mc(lsoc, rsoc), c = c}),
            inner = func.with(arcs.stairs.inner, {lc = lsic, rc = rsic, mc = mc(lsic, rsic), c = c}),
        },
        terrain = func.with(arcs.terrain, {lc = tlc, rc = trc, mc = mc(tlc, trc), c = tc}),
        isPlatform = true
    }

end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 15000,
        },
        description = {
            name = _("5m Underground platform"),
            description = _("An underground platform of 5m wide"),
            icon = "ui/construction/street/underpass_entry.tga"
        },
        category = {
            categories = {"platform"},
        },
        type = "mus_platform",
        order = {
            value = 260,
        },
        metadata = {
            platform = true,
            width = 5
        },
        
        updateFn = function(result, transform, tag, slotId, addModelFn, params)
            local allArcs = arcProfiles(result.config, result.arcs[slotId])

            local hW = 5
            local vectorW = func.interlace({
                -hW,
                - hW + edgeWidth,
                -hW + edgeWidth + sideWidth,
                hW - edgeWidth - sideWidth,
                hW - edgeWidth,
                hW
            })
            local vectorMW = {edgeWidth, sideWidth, (hW - edgeWidth - sideWidth) * 2, sideWidth, edgeWidth}
            local vectorM = {"edgeLeft", "left", "central", "right", "edgeRight"}
            local newModels = pipe.mapn(vectorW, vectorMW, vectorM)(function(w, mw, m)
                local size = makeSize(unpack(w))
                return {
                    station.newModel(result.modelType.platform[m] .. "_tl.mdl", mus.fitModel(mw, segmentLength, platformHeight, size, true, true)),
                    station.newModel(result.modelType.platform[m] .. "_br.mdl", mus.fitModel(mw, segmentLength, platformHeight, size, false, false))
                }
            end)
            
            result.models =
                pipe.new
                * result.models
                + func.flatten(newModels)
        end,
        
        getModelsFn = function(params)
            local hW = 5
            local vectorW = func.interlace({
                -hW
                - hW + edgeWidth,
                -hW + edgeWidth + sideWidth,
                hW - edgeWidth - sideWidth,
                hW - edgeWidth,
                hW
            })
            local vectorMW = {edgeWidth, sideWidth, (hW - edgeWidth - sideWidth) * 2, sideWidth, edgeWidth}
            local vectorM = {"edgeLeft", "left", "central", "right", "edgeRight"}
            
            return
                pipe.new
                * pipe.mapn(vectorW, vectorMW, vectorM)(function(w, mw, m)
                    local size = makeSize(unpack(w))
                    return {
                        station.newModel(m .. "_tl.mdl", mus.fitModel(mw, segmentLength, platformHeight, size, true, true)),
                        station.newModel(m .. "_br.mdl", mus.fitModel(mw, segmentLength, platformHeight, size, false, false))
                    }
                end)
                * pipe.flatten()
        end
    }

end
