local paramsutil = require "paramsutil"
local func = require "uus/func"
local coor = require "uus/coor"
local line = require "uus/coorline"
local trackEdge = require "uus/trackedge"
local station = require "uus/stationlib"
local quat = require "uus/quaternion"
local pipe = require "uus/pipe"
local uus = require "uus"
local uusm = require "uus_menu"
local ma = math

local abs = ma.abs
local ceil = ma.ceil
local floor = ma.floor
local pi = ma.pi
local atan = ma.atan
local pow = ma.pow
local cos = ma.cos
local sin = ma.sin
local min = ma.min
local e = ma.exp(1)
local log = ma.log
local log10 = log(10)
local unpack = table.unpack

local function params()
    return
        {
            {
                key = "mode",
                name = _("Function"),
                values = {_("Keep"), _("Disassemble")},
                defaultIndex = 0
            },
        }
end

local pure = function(pa)
    local params = {}
    for key, value in pairs(pa) do
        if (key ~= "seed") then
            params[key] = value
        end
    end
    return params
end

local function dissassemble(params)
    local pa = pipe.new
        * game.interface.getEntities({pos = game.gui.getTerrainPos(), radius = 9999}, {type = "CONSTRUCTION", includeData = false, fileName = "station/rail/uus_pass.con"})
        * pipe.map(game.interface.getEntity)
        * pipe.values()
        * pipe.filter(function(data) return data.params.seed == params.seed end)
    if (#pa == 1) then
        local params = pa[1].params
        local player = game.interface.getPlayer()
        
        func.forEach(func.range(params.entries, 2, #params.entries), function(data)
            local id = game.interface.buildConstruction(
                data.fileName,
                func.with(pure(data.params), {state = params.state}),
                data.transf
            )
            game.interface.setPlayer(id, player)
            game.interface.setName(id, data.name)
        end)
        
        game.interface.upgradeConstruction(
            pa[1].id,
            params.entries[1].fileName,
            func.with(pure(params.entries[1].params), {state = params.state})
        )
    end
    return {models = {}}
end

local updateFn = function(params)
    if (params.mode == 1) then return dissassemble(params) end
    
    local allEntries = pipe.new
        * params.entries
        * pipe.map(function(data)
            return {
                result = pipe.new
                * game.config.construction[data.fileName](func.with(data.params, {state = params.state, stationName = params.name}))
                * station.setTransform(data.m),
                id = data.id
            }
        end)
    
    local allConnections = allEntries * pipe.map(pipe.select("connectors"))
    
    local entryConn = allEntries
        * pipe.map(function(entry) return allEntries
            * pipe.filter(function(e) return e.id ~= entry.id end)
            * pipe.map(function(target)
                return {
                    {
                        conn = uus.unitLane(entry.result.connectors[1], target.result.connectors[1]),
                        distance = (entry.result.connectors[1] - target.result.connectors[1]):length(),
                        info = {{entry.id, 1}, {target.id, 1}}
                    },
                    {
                        conn = uus.unitLane(entry.result.connectors[1], target.result.connectors[2]),
                        distance = (entry.result.connectors[1] - target.result.connectors[2]):length(),
                        info = {{entry.id, 1}, {target.id, 2}}
                    },
                    {
                        conn = uus.unitLane(entry.result.connectors[2], target.result.connectors[1]),
                        distance = (entry.result.connectors[2] - target.result.connectors[1]):length(),
                        info = {{entry.id, 2}, {target.id, 1}}
                    },
                    {
                        conn = uus.unitLane(entry.result.connectors[2], target.result.connectors[2]),
                        distance = (entry.result.connectors[2] - target.result.connectors[2]):length(),
                        info = {{entry.id, 2}, {target.id, 2}}
                    }
                }
            end)
            * pipe.map(pipe.min(function(l, r) return l.distance < r.distance end))
        end
        )
        * pipe.flatten()
    
    local entrySides = entryConn
        * pipe.map(pipe.select("info"))
        * pipe.flatten()
        * pipe.fold({}, function(r, c)
            return func.with(r,
                {
                    [c[1]] = func.with(r[c[1]] or {false, false}, {[c[2]] = true})
                })
        end)
    
    local allEntries = pipe.new
        * params.entries
        * pipe.map(function(data)
            return
                pipe.new
                * game.config.construction[data.fileName](func.with(data.params, {state = params.state, isLeftOpen = entrySides[data.id][1], isRightOpen = entrySides[data.id][2]}))
                * station.setTransform(data.m)
        end)
    
    local newResult = station.mergeResults(unpack(allEntries))

    return func.with(newResult, {models = newResult.models + func.map(entryConn, pipe.select("conn"))})
end

function data()
    return {
        type = "ASSET_DEFAULT",
        buildMode = "SINGLE",
        availability = {
            yearFrom = 1800,
            yearTo = 1800
        },
        description = {
            name = "Something",
            description = "that you only need to read if you want to work with this mod."
        },
        order = 5011,
        params = params(),
        updateFn = updateFn
    }
end
